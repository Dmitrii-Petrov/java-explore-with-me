{
	"info": {
		"_postman_id": "bdcdd518-d332-4130-8fb2-a7eb0f956944",
		"name": "Comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "26651081"
	},
	"item": [
		{
			"name": "Create user1",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\":\"testUser1\",\"email\":\"testMail1@mail.com\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/admin/users"
			},
			"response": []
		},
		{
			"name": "Create user2",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\":\"testUser2\",\"email\":\"testMail2@mail.com\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/admin/users"
			},
			"response": []
		},
		{
			"name": "Create category",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\":\"testCategory\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/admin/categories"
			},
			"response": []
		},
		{
			"name": "Create event1",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"annotation\":\"testAnnotation for test test\",\"category\":1,\"description\":\"testDescription for test test\",\"eventDate\":\"2024-08-17 04:58:50\",\"location\":{\"lat\":-79.1771,\"lon\":66.191},\"paid\":\"true\",\"participantLimit\":\"947\",\"requestModeration\":\"true\",\"title\":\"testTitle\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/users/1/events"
			},
			"response": []
		},
		{
			"name": "Create comment1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Коммент должен содержать поля: id, created, event, commentator, text\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('created');\r",
							"pm.expect(target).to.have.property('event');\r",
							"pm.expect(target).to.have.property('commentator');\r",
							"pm.expect(target).to.have.property('text');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Поля в ответе соответствуют запросу\", function () {\r",
							"    pm.expect(target.text).equal(\"test comment text\");\r",
							"    pm.expect(target.event).equal(1);\r",
							"    pm.expect(target.commentator).equal(1);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"text\":\"test comment text\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/users/1/events/1/comments"
			},
			"response": []
		},
		{
			"name": "Create comment2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Коммент должен содержать поля: id, created, event, commentator, text\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('created');\r",
							"pm.expect(target).to.have.property('event');\r",
							"pm.expect(target).to.have.property('commentator');\r",
							"pm.expect(target).to.have.property('text');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Поля в ответе соответствуют запросу\", function () {\r",
							"    pm.expect(target.text).equal(\"test comment text2\");\r",
							"    pm.expect(target.event).equal(1);\r",
							"    pm.expect(target.commentator).equal(1);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"text\":\"test comment text2\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/users/1/events/1/comments"
			},
			"response": []
		},
		{
			"name": "Create comment fail event",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(404);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"text\":\"test comment text\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/users/1/events/2/comments"
			},
			"response": []
		},
		{
			"name": "Create comment fail user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(404);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"text\":\"test comment text\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/users/3/events/1/comments"
			},
			"response": []
		},
		{
			"name": "Create comment fail text",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(400);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"text\":\"\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/users/1/events/1/comments"
			},
			"response": []
		},
		{
			"name": "patch comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Коммент должен содержать поля: id, created, event, commentator, text\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('created');\r",
							"pm.expect(target).to.have.property('event');\r",
							"pm.expect(target).to.have.property('commentator');\r",
							"pm.expect(target).to.have.property('text');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Поля в ответе соответствуют запросу\", function () {\r",
							"    pm.expect(target.text).equal(\"patched comment\");\r",
							"    pm.expect(target.event).equal(1);\r",
							"    pm.expect(target.commentator).equal(1);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"id\":\"2\",\"text\":\"patched comment\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/users/1/events/1/comments"
			},
			"response": []
		},
		{
			"name": "patch comment fail text",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(400);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"id\":\"2\",\"text\":\"\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/users/1/events/1/comments"
			},
			"response": []
		},
		{
			"name": "get comments by user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json()[0];\r",
							"const target1 = pm.response.json()[1];\r",
							"\r",
							"pm.test(\"Коммент должен содержать поля: id, created, event, commentator, text\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('created');\r",
							"pm.expect(target).to.have.property('event');\r",
							"pm.expect(target).to.have.property('commentator');\r",
							"pm.expect(target).to.have.property('text');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Поля в ответе соответствуют запросу\", function () {\r",
							"    pm.expect(target.text).equal(\"test comment text\");\r",
							"    pm.expect(target.event).equal(1);\r",
							"    pm.expect(target.commentator).equal(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Поля в ответе соответствуют запросу\", function () {\r",
							"    pm.expect(target1.text).equal(\"patched comment\");\r",
							"    pm.expect(target1.event).equal(1);\r",
							"    pm.expect(target1.commentator).equal(1);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"id\":\"2\",\"text\":\"\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/users/1/events/1/comments?rangeStart=2022-01-06%2013%3A30%3A38&rangeEnd=2097-09-06%2013%3A30%3A38&from=0&size=1000",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"1",
						"events",
						"1",
						"comments"
					],
					"query": [
						{
							"key": "rangeStart",
							"value": "2022-01-06%2013%3A30%3A38"
						},
						{
							"key": "rangeEnd",
							"value": "2097-09-06%2013%3A30%3A38"
						},
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get comments by user fail event",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(404);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"id\":\"2\",\"text\":\"\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/users/1/events/3/comments?rangeStart=2022-01-06%2013%3A30%3A38&rangeEnd=2097-09-06%2013%3A30%3A38&from=0&size=1000",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"1",
						"events",
						"3",
						"comments"
					],
					"query": [
						{
							"key": "rangeStart",
							"value": "2022-01-06%2013%3A30%3A38"
						},
						{
							"key": "rangeEnd",
							"value": "2097-09-06%2013%3A30%3A38"
						},
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get comments by user fail user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(404);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"id\":\"2\",\"text\":\"\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/users/3/events/1/comments?rangeStart=2022-01-06%2013%3A30%3A38&rangeEnd=2097-09-06%2013%3A30%3A38&from=0&size=1000",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"3",
						"events",
						"1",
						"comments"
					],
					"query": [
						{
							"key": "rangeStart",
							"value": "2022-01-06%2013%3A30%3A38"
						},
						{
							"key": "rangeEnd",
							"value": "2097-09-06%2013%3A30%3A38"
						},
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get comment by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Коммент должен содержать поля: id, created, event, commentator, text\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('created');\r",
							"pm.expect(target).to.have.property('event');\r",
							"pm.expect(target).to.have.property('commentator');\r",
							"pm.expect(target).to.have.property('text');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Поля в ответе соответствуют запросу\", function () {\r",
							"    pm.expect(target.text).equal(\"test comment text\");\r",
							"    pm.expect(target.event).equal(1);\r",
							"    pm.expect(target.commentator).equal(1);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/comments/1"
			},
			"response": []
		},
		{
			"name": "delete comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(204);  \r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"id\":\"2\",\"text\":\"\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/users/1/events/1/comments/1"
			},
			"response": []
		},
		{
			"name": "delete comment fail id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(404);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"id\":\"2\",\"text\":\"\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/users/1/events/1/comments/1111"
			},
			"response": []
		},
		{
			"name": "get comment by id after delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(404);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/comments/1"
			},
			"response": []
		},
		{
			"name": "get comment by id Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json()[0];\r",
							"\r",
							"pm.test(\"Коммент должен содержать поля: id, created, event, commentator, text\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('created');\r",
							"pm.expect(target).to.have.property('event');\r",
							"pm.expect(target).to.have.property('commentator');\r",
							"pm.expect(target).to.have.property('text');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Поля в ответе соответствуют запросу\", function () {\r",
							"    pm.expect(target.text).equal(\"patched comment\");\r",
							"    pm.expect(target.event).equal(1);\r",
							"    pm.expect(target.commentator).equal(1);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/comments?rangeStart=2022-01-06%2013%3A30%3A38&rangeEnd=2097-09-06%2013%3A30%3A38&from=0&size=1000&eventId=1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments"
					],
					"query": [
						{
							"key": "rangeStart",
							"value": "2022-01-06%2013%3A30%3A38"
						},
						{
							"key": "rangeEnd",
							"value": "2097-09-06%2013%3A30%3A38"
						},
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "1000"
						},
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		}
	]
}